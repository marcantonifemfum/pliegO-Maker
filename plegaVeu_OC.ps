%%!
%% plegaVeu_OC.ps
%%Com treballa, què dedueix i quin resultat ens retorna?

%% l'algorisme parteix de com establim inicialment el nombre de línies per pàgina i el nombre de pàgines per pliegO que volem

%% el nombre de línies per pàgina podria deduir-se, inicialment, en base al nombre total de caràcters del text

%% en base a aquests dos objectius, trenca el text per l'espai en blanc (sense sil·labació) i dedueix ell sol
%% el nombre de caràcters màxim per línia (d'1 a diverses paraules) per tal d'acostar-se a omplir, sempre, el 100% del pliegOS

%% treballa a partir d'1 sol caràcter per línia però, per facilitar-li la feina,
%% aquest paràmetre inicial podria ser igual al nombre de caràcters del mot més llarg

%% com a resultat ens retorna l'estructura de text a compondre, línia a línia i pàgina a pàgina,
%% segons els paràmetres establerts de línies per pàgina i pàgines per pliegO

%% cal veure si forçarem d'alguna manera el fer paràgrafs (doncs el RAP, d'entrada, ni puntua ni fa paràgrafs)

%% aqust algorisme ha de ser cridat per nUp_pliegOS.ps

%% cridarem llegeixJson i filtrarem l'estructura del text
%% de moment no forcem paràgrafs? eliminem espais en blanc sobrers d'entremig i a la cua?
%(m'escalfo els peus encara amb la manteta i la tebior dels dits de la Fina)

%%MarcelDuchamp
%(/Library/WebServer/Documents/www.pliegos.net/maker/txt/theCreativeAct_MarcelDuchamp.txt)
%(r) file 65535 string readstring pop

%%J.J.Tharrats
(/Library/WebServer/Documents/www.pliegos.net/maker/txt/lArtComAnecessitatConstant_JJTharrats.txt)
(r) file 65535 string readstring pop

%%Julio Cortázar
%(/Library/WebServer/Documents/www.pliegos.net/maker/txt/instruccionesParaSubirUnaEscalera_JulioCortazar.txt)
%(r) file 65535 string readstring pop

%%John Cheever
%(/Library/WebServer/Documents/www.pliegos.net/maker/txt/elNedador_JohnCheever.txt)
%(r) file 65535 string readstring pop

%%Emily Dickinson
%% versió retorn de carro, 10 decimal (\n)
%% el tractament del retorn de carro s'hauria de fer un cop hi hagi l'string muntada de la filera, analitzant-la, quan trobéssim
%% un \n (10 decimal) trencaríem el text encetant una nova línia amb el text sobrant i valorant si omple o no la pàgina,
%% si en trobéssim dos de seguits \n\n (dos 10 decimal), n'encetaríem dues: una nova línia buida i una més amb la resta de text
%(Si vinguessis per tardor\nespolsaríem l'estiu\namb llengots i mitja rialla,\ncom mestresses al badiu.\n\nSi ens veiéssim en un any\ncabdellaríem mesades,\ntotes al seu calaixer,\nmentre el temps passa debades.\n\nSi triguéssis sols un segles,\ncomptats només amb la mà,\ndeixondint els dits tot d'una\ndins el Van Diemens llunyà.\n\nSi del cert la vida fuig,\nbé prou que ambdós ho sabem,\nque foragitant l'embolcall\nfaríem un tast a l'etern.\n\nAra però, ignorem al capdavall\nsi el temps és l'ala incerta\nd'un borinot que, cap a mi furiós,\nenvà el seu fibló no encerta.)
%% versió espai i doble espai
%(Si vinguessis per tardor espolsaríem l'estiu amb llengots i mitja rialla, com mestresses al badiu. Si ens veiéssim en un any cabdellaríem mesades, totes al seu calaixer, mentre el temps passa debades. Si triguéssis sols un segles, comptats només amb la mà, deixondint els dits tot d'una dins el Van Diemens llunyà. Si del cert la vida fuig, bé prou que ambdós ho sabem, que foragitant l'embolcall faríem un tast a l'etern. Ara però, ignorem al capdavall si el temps és l'ala incerta d'un borinot que, cap a mi furiós, envà el seu fibló no encerta.)

%%Embarbussament dalinià original https://ca.wikipedia.org/wiki/Embarbussament
%(Una polla xica, pica, pellarica, camatorta i becarica va tenir sis polls xics, pics, pellarics, camacurts i becarics. Si la polla no hagués sigut xica, pica, pellarica, camatorta i becarica, els sis polls no haguessin sigut xics, pics, pellarics, camacurts i becarics.)

%% anàlisi:
false{
%% quants caràcters té el text?
dup length ==
%% quants caràcters té el mot més llarg?
/motMesLlarg 0 def
dup
{
 ( ) search
 {
  length dup motMesLlarg gt
  {
   /motMesLlarg exch def
   pop
  }
  {
   pop pop
  }ifelse
 }
 {
  length dup motMesLlarg gt
  {
   /motMesLlarg exch def
   pop
  }
  {
   pop pop
  }ifelse

  exit
 }ifelse
}loop
motMesLlarg (::::)pstack quit
}if

%% amb la darrera paraula menys: Error: /stackunderflow in --pop--  HICAP2 d tancament final
%(Una polla xica, pica, pellarica, camatorta i becarica va tenir sis polls xics, pics, pellarics, camacurts i becarics. Si la polla no hagués sigut xica, pica, pellarica, camatorta i becarica, els sis polls no haguessin sigut xics, pics, pellarics, camacurts i)

%% amb una sola paraula a la darrera pàgina: B CUA 1
%(Una polla xica, pica, pellarica, camatorta i becarica va tenir sis polls xics, pics, pellarics, camacurts i becarics. Si la polla no hagués sigut xica, pica, pellarica, camatorta i becarica, els sis polls no haguessin sigut xics, pics,)

%% sense la darrera pàgina: Error: /stackunderflow in --pop-- >>> HICAP2 de tancament final
%(Una polla xica, pica, pellarica, camatorta i becarica va tenir sis polls xics, pics, pellarics, camacurts i becarics. Si la polla no hagués sigut xica, pica, pellarica, camatorta i becarica, els sis polls no haguessin sigut xics,)

%11
%(polls no)
%[(camatorta i) (becarica,) (els sis) (polls no)]
%[[(Una polla) (xica, pica,) (pellarica,) (camatorta i)] [(becarica va) (tenir sis) (polls xics,) (pics,)] [(pellarics,) (camacurts i) (becarics.) (Si la polla)] [(no hagu\351s) (sigut xica,) (pica,) (pellarica,)] [(camatorta i) (becarica,) (els sis) (polls no)]]
%(...CUA 0)
%(haguessin)
%(Una polla xica, pica, pellarica, camatorta i becarica va tenir sis polls xics, pics, pellarics, camacurts i becarics. Si la polla no hagués sigut xica, pica, pellarica, camatorta i becarica, els sis polls no haguessin)

%% significatiu per quan establim la relació de carxlin, linxpag i pagxpli doncs ja no pot completar el nombre de pàgines (6)
% Error: /stackunderflow in --pop--  >>> HICAP2 de tancament final
%(Una polla xica, pica, pellarica, camatorta i becarica va tenir sis polls xics, pics, pellarics, camacurts i becarics. Si la polla no hagués sigut xica, pica, pellarica, camatorta i becarica, els sis polls no)

%% significatiu per quan establim la relació de carxlin, linxpag i pagxpli doncs ja no pot completar el nombre de pàgines (6)
% B CUA 1
%(Una polla xica, pica, pellarica, camatorta i becarica va tenir sis polls xics, pics, pellarics, camacurts i becarics. Si la polla no hagués sigut xica, pica, pellarica, camatorta i becarica, els sis polls)

%% significatiu per quan establim la relació de carxlin, linxpag i pagxpli doncs ja no pot completar el nombre de pàgines (6)
% Error: /stackunderflow in --pop-- >>> HICAP2 de tancament final
%(Una polla xica, pica, pellarica, camatorta i becarica va tenir sis polls xics, pics, pellarics, camacurts i becarics. Si la polla no hagués sigut xica, pica, pellarica, camatorta i becarica, els sis)

%length == %% l'original fa 267 caràcters d'1 octet
dup /tae exch def

false{  %% amb 4 línies per pàgina i 6 pàgines d'un pliegOS 4+4:

%% la solució exacta de l'embarbussament dalinià original és a 13 caràctersi sortida (...CUA 1)
%% ídem amb 5 línies per pàgina B i (...CUA 0)
%% ídem amb 3 línies per pàgina B i (...CUA 1)
%% ídem amb 2 línies per pàgina: Error: /stackunderflow in --pop-- >>> HICAP0 de tancament final

%% amb 4 línies per pàgina i 4 pàgines d'un pliegOS  4+4: error >>> HICAP2 de tancament final
%% amb 5 línies per pàgina i 4 pàgines d'un pliegOS  4+4: B (...CUA 1)
%% amb 6 línies per pàgina i 4 pàgines d'un pliegOS  4+4: B (...CUA 1)
%% amb 7 línies per pàgina i 4 pàgines d'un pliegOS  4+4: B (...CUA 1)
%% amb 8 línies per pàgina i 4 pàgines d'un pliegOS  4+4: B (...CUA 1)

%% amb 8 línies per pàgina i 2 pàgines (columna a doble pàgina) d'un pliegOS  4+4: error >>> HICAP2 
%% amb 7 línies per pàgina i 2 pàgines (columna a doble pàgina) d'un pliegOS  4+4: error >>> HICAP2 
%% amb 6 línies per pàgina i 2 pàgines (columna a doble pàgina) d'un pliegOS  4+4: error >>> HICAP0
%% amb 5 línies per pàgina i 2 pàgines (columna a doble pàgina) d'un pliegOS  4+4: (...CUA 1)
%% amb 4 línies per pàgina i 2 pàgines (columna a doble pàgina) d'un pliegOS  4+4: error >>> HICAP0

%% significatiu per quan establim la relació de carxlin, linxpag i pagxpli doncs no pot completar el nombre de pàgines
%% amb 4 línies per pàgina i 14 pàgines d'un pliegOS  8+8: (...CUA 1) però només n'omple 9 
%% amb 2 línies per pàgina i 14 pàgines d'un pliegOS  8+8: (...CUA 1) però només n'omple 13
%% amb 1 línia per pàgina i 14 pàgines d'un pliegOS  8+8: error >>> HICAP2 i les omple totes

%% amb 2 línies per pàgina i 7 pàgines (columna a doble pàgina) d'un pliegOS  8+8: error >>> HICAP2 
%% amb 4 línies per pàgina i 7 pàgines (columna a doble pàgina) d'un pliegOS  8+8: (...CUA 1) 
%% significatiu per quan establim la relació de carxlin, linxpag i pagxpli doncs no pot completar el nombre de pàgines
%% amb 6 línies per pàgina i 7 pàgines (columna a doble pàgina) d'un pliegOS  8+8: (...CUA 1) 
%% significatiu per quan establim la relació de carxlin, linxpag i pagxpli doncs no pot completar el nombre de pàgines
%% amb 8 línies per pàgina i 7 pàgines (columna a doble pàgina) d'un pliegOS  8+8: (...CUA 1) 

%% casuístiques del errors (ara no analitzem què els provoca!)

%% error >>> HICAP2
%% peta a l'última pàgina (tants HICAP2 com MAXpagPliegO - 1)
%% quan peta no hi ha res a l'stack
%% la situació de les 4 variables clau és:
%%MAXsuaraX... 21
%%UNAlinia... (i becarics.)
%%UNAplana... [(pellarics, camacurts)]
%%UNpliegO... [[(Una polla xica, pica,) (pellarica, camatorta)] [(i becarica va tenir) (sis polls xics, pics,)] [(pellarics, camacurts) (i becarics. Si la)] [(polla no hagu\351s sigut) (xica, pica,)] [(pellarica, camatorta) (i becarica, els sis)] [(polls no haguessin) (sigut xics, pics,)]]
%% solució quick&dirty proposada: ficar UNAlinia a la cua d' UNAplana, i aquesta a la cua d' UNpliegO i sortir

%% error >>> HICAP0
%% peta a l'última pàgina
%% quan peta no hi ha res a l'stack
%% la situació de les 4 variables clau és:
%%MAXsuaraX... 36
%%UNAlinia... (pellarics, camacurts i becarics.)
%%UNAplana... [(hagu\351s sigut xica, pica, pellarica,) (camatorta i becarica, els sis polls) (no haguessin sigut xics, pics,)]
%%UNpliegO... [[(Una polla xica, pica, pellarica,) (camatorta i becarica va tenir sis) (polls xics, pics, pellarics,) (camacurts i becarics. Si la polla no)]]
%% solució quick&dirty proposada: ficar UNAlinia a la cua d' UNAplana, i aquesta a la cua d' UNpliegO i sortir

%% casuístiques de les sortides controlades del loop

%% sortida (...CUA 1) solucionada!
%% la situació de les 4 variables clau és:
%%MAXsuaraX... 10
%%UNAlinia... (becarics.)
%%UNAplana... [(i)]
%%UNpliegO... [[(Una polla) (xica,) (pica,) (pellarica,) (camatorta) (i becarica) (va tenir) (sis polls)] [(xics,) (pics,) (pellarics,) (camacurts) (i) (becarics.) (Si la) (polla no)] [(hagu\351s) (sigut) (xica,) (pica,) (pellarica,) (camatorta) (i) (becarica,)] [(els sis) (polls no) (haguessin) (sigut) (xics,) (pics,) (pellarics,) (camacurts)]]
(...CUA 1)
%% sortida (no hi ha res a l'stack): ficar UNAlinia a la cua d' UNAplana, i aquesta a la cua d' UNpliegO i sortir

%% sortida (...CUA 0) solucionada!
%% la situació de les 4 variables clau és:
%%MAXsuaraX... 11
%%UNAlinia... (camacurts i)
%%UNAplana... [(haguessin) (sigut xics,) (pics,) (pellarics,) (camacurts i)]
%%UNpliegO... [[(Una polla) (xica, pica,) (pellarica,) (camatorta i) (becarica va)] [(tenir sis) (polls xics,) (pics,) (pellarics,) (camacurts i)] [(becarics.) (Si la polla) (no hagu\351s) (sigut xica,) (pica,)] [(pellarica,) (camatorta i) (becarica,) (els sis) (polls no)] [(haguessin) (sigut xics,) (pics,) (pellarics,) (camacurts i)]]
(...CUA 0)
%%STACK... (becarics.)
%% sortida: l' string que queda a l'stack enceta una nova línia que enceta una nova pàgina que s'afegeix a la cua d' UNpliegO

%% simulació del resultat amb els paràmetres inicials de 4 línies per pàgina i 6 pàgines d'un pliegOS 4+4 (max 13 carxlin):
{  %% pliegO
 {  %% pàgina 1
  (Una polla)
  (xica, pica,)
  (pellarica,)
  (camatorta i)
 }
 {  %% pàgina 2
  (becarica va)
  (tenir sis)
  (polls xics,)
  (pics,)
 }
 {  %% pàgina 3
  (pellarics,)
  (camatorts i)
  (becarics. Si)
  (la polla no)
 }
 {  %% pàgina 4
  (hagués sigut)
  (xica, pica,)
  (pellarica,)
  (camatorta i)
 }
 {  %% pàgina 5
  (becarica, els)
  (sis polls no)
  (haguessin)
  (sigut xics,)
 }
 {  %% pàgina 6
  (pics,)
  (pellarics,)
  (camatorts i)
  (becarics.)
 }
}
}if


%%Aquestes són les dues variables amb les que treballa l'algorisme per endreçar paraules, fer línies i omplir pàgines

22 /NlinPLANA exch def  %% nombre de línies per plana (sempre es compleix, menys la darrera o quan no s'arriba al màxim)

14 /NpagPliegO exch def  %% nombre de pàgines componibles al pliegO excollit (8+8up=14/7 | 4+4up=6/3)


/UNAlinia () def  %% construirem una línia cada vegada
/MAXsuaraX 25 def  %% variable derivada d'enflataGlifs_ però que ens diu quants caràcters màxims ha de contenir una línia
%% comencem amb 1 sol caràcter per tal vagi augmentant i deduint a partir de quan li quadra la previsió
%% com que ara inicialment no trencarem síl·labes, el mot més llarg hauria de servir com a inici /MAXsuaraX per guanyar temps
%% però al compondre de debò serà la posició màxima X de final de línia permesa qui ens mani
%% (compararà amb /suaraX d'enflataGlifs) i serà qui ens forci d'abaixar el cos fins que quadri (posarem un límit de cos mínim)
/UNAplana [] def  %% les línies d'1 plana
/UNpliegO [] def  %% planes d'1 pliegO
/MAXlinPLANA NlinPLANA def  %% nombre de línies per plana (sempre es compleix, menys la darrera)
/MAXpagPliegO NpagPliegO def  %% nombre de pàgines componibles al pliegO excollit (8+8up=14/7 | 4+4up=6/3)

%% aquest loop donarà voltes fins que hi càpiga tot el text acostant-se al màxim a la previsió feta 

{  %% stopped

{  %% loop que ens endreça línies de text a /UNAplana i aquestes dins /UNpliegO per a ser composades pel loop següent
 ( ) search
 {  %% troba espais en blanc

  %% en comptes del comptador de glifs hi hauria d'anar l'execució d' enflataGlifs2_plegaVeu_metrica.ps
  dup length
  %% avalua si hi cap dins la línia o no
  MAXsuaraX gt
  {  %% no hi cap dins la línia
%% però si és per un sol mot (/UNAlinia hauria d'estar buida), voldrà dir que /MAXsuaraX ha de redefinir-se
%% (ara, en caràcters augmentar, però al compondre de debò abaixarem el cos)

%   UNAlinia length 0 eq
%   {  %% hem de redefinir, ara, en caràcters augmentar, però al compondre de debò abaixarem el cos

   %% per tant hem d'inicialitzar les variables i HAUREM DE REINICIAR EL LOOP
   /UNAlinia () def  %% hi haurà una línia cada vegada
   MAXsuaraX 1 add /MAXsuaraX exch def  %% ara són caràcters, però serà la posició màxima X de final de línia permesa
   %% (compararà amb /suaraX i al compondre de debò ens obligarà a abaixar el cos --quants punts?)
   /UNAplana [] def  %% les línies d'1 plana
   /UNpliegO [] def  %% planes d'1 pliegO
   /MAXlinPLANA NlinPLANA def  %% nombre de línies per plana
   pop pop pop tae  %% tornem a posar la cadena de text inicial a l'stack del loop

(el mot NOHICAP a la linia i cal REINICIAR EL LOOP)=  %pstack quit

%   }
%   {
%(NOHICAP perojanhiha1omes)pstack quit

%   }ifelse

  }
  {  %% hi cap dins la línia
   %% aquí muntem, en teoria, un nou mot a /UNAlinia
   %%!! primer cal sumarla a la que hi ha per saber si supera el màxim, i decidir si afegim o hem de fer una línia nova
   dup length UNAlinia length add
   1 add  %% l'ESPAI en blanc l'afegirem a l'inici d'un nou mot només si la línia ja existeix i ja el comptem aquí
   MAXsuaraX gt dup
   {
    %% l'afegim a una línia nova, tret que la que ja tenim estigui buida i això vol dir que és degut a l'espai en blanc
    UNAlinia length 0 eq
    {  %% llavors, l'afegim a l'existent
     pop false
    }
    {
     pop true
    }ifelse
   }if

   {  %% l'afegim a una línia nova
    %% cal abans desar l'anterior a /UNAplana i saber si és la darrera admesa o no
    UNAplana length 1 add MAXlinPLANA eq  %% és la darrera línia admesa a la plana?
    {  %% ho és i la desem a /UNAplana
(es la darrera linia admesa a la plana)=
     UNAplana length dup /ARAva exch def 1 add array dup 0 UNAplana putinterval
     dup ARAva UNAlinia put /UNAplana exch def  %% la desem
     %% si és la darrera línia admesa, la plana també s'haurà de desar a /UNpliegO
     %% i aquí també caldrà saber si és la darrera plana admesa o no segons MAXpagPliegO
     UNpliegO length 1 add MAXpagPliegO eq  %% és la darrera plana admesa al pliegO?
     {  %% si és la darrera plana admesa al pliegO i encara manca text per omplir, HAUREM DE REINICIAR EL LOOP
        %% redefinint /MAXsuaraX augmentant caràcters i hem d'inicialitzar les variables
        %%(al de debò aquest paràmetre quedarà igual i el que tocarem serà el cos del text abaixant-lo n punts)

        %% no cal que ens assegurem que encara manca text per omplir
        %% encara que sempre hi podria haver un final perfectament sincrònic, si som aquí és perquè encara en manca

      %% per tant hem d'inicialitzar les variables i HAUREM DE REINICIAR EL LOOP
      MAXsuaraX 1 add /MAXsuaraX exch def  %% ara són caràcters, però serà la posició màxima X de final de línia permesa
      %% (compararà amb /suaraX i al compondre de debò ens obligarà a abaixar el cos --quants punts?)
      /UNAplana [] def  %% les línies d'1 plana
      /UNpliegO [] def  %% planes d'1 pliegO
      /MAXlinPLANA NlinPLANA def  %% nombre de línies per plana
      pop pop pop tae  %% tornem a posar la cadena de text inicial a l'stack del loop

      () dup  %% a %!% inicialitza /UNAlinia i fa treballar pop
      (la plana NOHICAP al pliegOS i cal REINICIAR EL LOOP)=  %pstack quit
     }
     {  %% la desem a /UNpliegO, però encara hi caben planes al pliegO
      UNpliegO length dup /ARAva exch def 1 add array dup 0 UNpliegO putinterval
      dup ARAva UNAplana put /UNpliegO exch def  %% la desem

      %% i definim una nova plana buida i la nova línia que ja tenim a l'stack
      /UNAplana [] def
      %% definir la nova lína i eliminar l'ESPAI en blanc ja es fa sortint d'aquest ifelse
(DESEM una PLANA i el pliegOS continua)= %pstack quit
     }ifelse
    }
    {  %% desem la línia anterior a /UNAplana
     UNAplana length dup /ARAva exch def 1 add array dup 0 UNAplana putinterval
     dup ARAva UNAlinia put /UNAplana exch def  %% la desem
(...desem l'anterior...)=  %pstack quit
    }ifelse
    %!%
    /UNAlinia exch def  %% la desem i òbviament aquí NO hi afegim l'ESPAI en blanc al davant
    pop  %% eliminem l'ESPAI en blanc per seguir amb el loop
(<<< HICAP2 solucionada! --pero la darrera sumada a la que hi ha supera el maxim)=  %pstack quit
%% sense res a l'stack, solució quick&dirty capturant l'error amb l'stopped:
%% ficar UNAlinia a la cua d' UNAplana, i aquesta a la cua d' UNpliegO i sortir
   }
   {  %% la línia ja existeix i l'afegim a la línia que ja tenim
    UNAlinia length 0 ne  %% ens CAL afegir l'ESPAI en blanc al davant perquè la que ja tenim NO és buida?
    {
     UNAlinia length dup /ARAva exch def 1 add string dup 0 UNAlinia putinterval
     dup ARAva ( ) putinterval /UNAlinia exch def  %% la desem
%(EP!)pstack quit
    }if

    dup length UNAlinia length dup /ARAva exch def add string dup 0 UNAlinia putinterval
    dup 3 -1 roll ARAva exch putinterval /UNAlinia exch def  %% la desem
    pop  %% eliminem l'ESPAI en blanc per seguir amb el loop
(<<< HICAP0 solucionada! --i l'afegim a la linia que ja tenim)=  %pstack quit

   }ifelse

  }ifelse
 }
 {  %% ja no troba espais en blanc, per tant se'ns acaba l'string de text
  %% aquí muntem, en teoria, el darrer mot a /UNAlinia
  %% doncs ens cal fer una comprovació similar a %%!!

  %% aquí muntem, en teoria, un nou mot a /UNAlinia
  %%!! primer cal sumarla a la que hi ha per saber si supera el màxim, i decidir si afegim o hem de fer una línia nova
  dup length UNAlinia length add
  1 add  %% l'ESPAI en blanc l'afegirem a l'inici d'un nou mot només si la línia ja existeix i ja el comptem aquí
  MAXsuaraX gt dup
  {
   %% l'afegim a una línia nova, tret que la que ja tenim estigui buida i això vol dir que és degut a l'espai en blanc
   UNAlinia length 0 eq
   {  %% llavors, l'afegim a l'existent
    pop false
   }
   {
    pop true
   }ifelse
  }if

   {  %% l'afegim a una línia nova
    %% cal abans desar l'anterior a /UNAplana i saber si és la darrera admesa o no
    UNAplana length 1 add MAXlinPLANA eq  %% és la darrera línia admesa a la plana?
    {  %% ho és i la desem a /UNAplana
(es la darrera linia admesa a la plana)=
     UNAplana length dup /ARAva exch def 1 add array dup 0 UNAplana putinterval
     dup ARAva UNAlinia put /UNAplana exch def  %% la desem
     %% si és la darrera línia admesa, la plana també s'haurà de desar a /UNpliegO
     %% i aquí també caldrà saber si és la darrera plana admesa o no segons MAXpagPliegO
     UNpliegO length 1 add MAXpagPliegO eq  %% és la darrera plana admesa al pliegO?
     {  %% si és la darrera plana admesa al pliegO i encara manca text per omplir, HAUREM DE REINICIAR EL LOOP
        %% redefinint /MAXsuaraX augmentant caràcters i hem d'inicialitzar les variables
        %%(al de debò aquest paràmetre quedarà igual i el que tocarem serà el cos del text abaixant-lo n punts)

        %% no cal que ens assegurem que encara manca text per omplir
        %% encara que sempre hi podria haver un final perfectament sincrònic, si som aquí és perquè encara en manca

      %% per tant hem d'inicialitzar les variables i HAUREM DE REINICIAR EL LOOP
      MAXsuaraX 1 add /MAXsuaraX exch def  %% ara són caràcters, però serà la posició màxima X de final de línia permesa
      %% (compararà amb /suaraX i al compondre de debò ens obligarà a abaixar el cos --quants punts?)
      /UNAplana [] def  %% les línies d'1 plana
      /UNpliegO [] def  %% planes d'1 pliegO
      /MAXlinPLANA NlinPLANA def  %% nombre de línies per plana
      pop tae  %% tornem a posar la cadena de text inicial a l'stack del loop

      ()  %% a %!% inicialitza /UNAlinia
      (la plana NOHICAP al pliegOS i cal REINICIAR EL LOOP)=  %pstack quit

/nihilObstatQuominusImprimatur false def

/UNAlinia exch def  %% la desem i òbviament aquí NO hi afegim l'ESPAI en blanc al davant
     }
     {  %% la desem a /UNpliegO, però encara hi caben planes al pliegO
      UNpliegO length dup /ARAva exch def 1 add array dup 0 UNpliegO putinterval
      dup ARAva UNAplana put /UNpliegO exch def  %% la desem

(...CUA 0 solucionada!)=
%UNpliegO UNAplana UNAlinia MAXsuaraX
%(DESEM la darrera PLANA i el pliegOS HA ACABAT?) pstack quit
%% l' string que queda a l'stack enceta una nova línia que enceta una nova pàgina
1 array astore  %% i aquesta plana a /UNpliegO
UNpliegO length dup /ARAva exch def 1 add array dup 0 UNpliegO putinterval
dup ARAva 4 -1 roll put /UNpliegO exch def
%%Ara cal trobar una sortida directe d'aqui ...de moment, a sac
exit

%  dup length UNAlinia length dup /ARAva exch def add string dup 0 UNAlinia putinterval
%  dup 3 -1 roll ARAva exch putinterval

      %% i definim una nova plana buida i la nova línia que ja tenim a l'stack
      /UNAplana [] def
      %% definir la nova lína i eliminar l'ESPAI en blanc ja es fa sortint d'aquest ifelse

/nihilObstatQuominusImprimatur true def
     }ifelse
    }
    {  %% desem la línia anterior a /UNAplana
     UNAplana length dup /ARAva exch def 1 add array dup 0 UNAplana putinterval
     dup ARAva UNAlinia put /UNAplana exch def  %% la desem
(...desem l'anterior...)=  %pstack quit

/UNAlinia exch def  %% la desem i òbviament aquí NO hi afegim l'ESPAI en blanc al davant

(...CUA 1 solucionat!)=
%UNpliegO UNAplana UNAlinia MAXsuaraX
%% no hi ha res a l'stack: ficar UNAlinia a la cua d' UNAplana, i aquesta a la cua d' UNpliegO i sortir
%% /UNAlinia a /UNAplana
  UNAplana length dup /ARAva exch def 1 add array dup 0 UNAplana putinterval
  dup ARAva UNAlinia put
%% i aquesta plana a /UNpliegO
  UNpliegO length dup /ARAva exch def 1 add array dup 0 UNpliegO putinterval
  dup ARAva 4 -1 roll put /UNpliegO exch def

/nihilObstatQuominusImprimatur true def
    }ifelse
    %!%
%    /UNAlinia exch def  %% la desem i òbviament aquí NO hi afegim l'ESPAI en blanc al davant
%    pop  %% eliminem l'ESPAI en blanc per seguir amb el loop
%(<<< HICAP3 pero la darrera sumada a la que hi ha supera el maxim)=  %pstack quit
   }
   {  %% la línia ja existeix i l'afegim a la línia que ja tenim
    UNAlinia length 0 ne  %% ens CAL afegir l'ESPAI en blanc al davant perquè la que ja tenim NO és buida?
    {
     UNAlinia length dup /ARAva exch def 1 add string dup 0 UNAlinia putinterval
     dup ARAva ( ) putinterval /UNAlinia exch def  %% la desem
%(EP!)pstack quit
    }if

    dup length UNAlinia length dup /ARAva exch def add string dup 0 UNAlinia putinterval
    dup 3 -1 roll ARAva exch putinterval /UNAlinia exch def  %% la desem
    pop  %% eliminem l'ESPAI en blanc per seguir amb el loop
(<<< HICAP1 i l'afegim a la linia que ja tenim)=  %pstack quit

UNpliegO UNAplana UNAlinia MAXsuaraX
(...CUA 2)pstack quit
   }ifelse

%(ja no troba mes espais en blanc!) pstack quit

  nihilObstatQuominusImprimatur
  {
   %% i sortim?
   exit
  }if
 }ifelse

}loop

}stopped
{
 %% (ERROR?)pstack quit
 %% tant HICAP0 com HICAP2, peten sense res a l'stack, solució quick&dirty capturant l'error amb l'stopped:
 %% ficar /UNAlinia a la cua d' /UNAplana, i aquesta a la cua d' /UNpliegO i sortir
 %% /UNAlinia a /UNAplana
 UNAplana length dup /ARAva exch def 1 add array dup 0 UNAplana putinterval
 dup ARAva UNAlinia put
 %% i aquesta plana a /UNpliegO
 UNpliegO length dup /ARAva exch def 1 add array dup 0 UNpliegO putinterval
 dup ARAva 4 -1 roll put /UNpliegO exch def
}if

%% quan fem paràgrafs, un loop intermig podria filtrar les vídues i les orfes movent strings de lloc
UNpliegO dup dup dup length dup 3 string cvs print flush ( ...nombre de pàgines finals sobre... ) print flush
NpagPliegO 3 string cvs print flush ( ...possibles\n)print flush
1 sub get length 3 string cvs print flush ( ...nombre de línies de la darrera pàgina\n)print flush
0 get length 3 string cvs print flush ( ...nombre de línies de la primera pàgina\n)print flush
%UNAplana UNAlinia
MAXsuaraX 3 string cvs print flush ( ...nombre màxim de caràcters per línia\n)print flush
(\n...estructura:\n\n)print flush
==  %% estructura a compondre

%% el loop final agafaria totes les variables definides de composició:
(--loop--)pstack
